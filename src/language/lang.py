from enum import Enum, auto
from dotenv import load_dotenv
import json, os

class LanguageList(Enum): # oh no
    NO_DESCRIPTION_FOUND = auto()
    NO_ARGUMENTS_FOUND = auto()
    NO_METADATA_FOUND = auto()
    NO_VM_AVALIABLE = auto()
    NO_VM_AVALIABLE_DESC = auto()
    MAIN_STATUS_NULL = auto()
    SELECT_VM = auto()
    MAIN_STATUS_RUNNING = auto()
    DUMMY = auto()
    MAIN_VMSTART = auto()
    MAIN_VMEDIT = auto()
    CREATEVM_3_TITLE = auto()
    CREATEVM_2_TITLE = auto()
    CREATEVM_1_TITLE = auto()
    CREATE_VM = auto()
    IMAGINARY_INFO = auto()
    DISK_TOOL = auto()
    FORCE_RELOAD_LIST = auto()
    CREATEVM_TITLE_LOADISO = auto()
    CREATEVM_LABEL_LOADISO = auto()
    CREATEVM_DISKTYPE_RAW = auto()
    CREATEVM_DISKTYPE_QCOW2 = auto()
    CREATEVM_DISKTYPE_VHDX = auto()
    CREATEVM_SKIP_DISK = auto()
    CREATEVM_TCG_ACCEL = auto()
    CREATEVM_DRIVER_DISK = auto()
    CREATEVM_NO_DISK = auto()
    CREATEVM_LABEL_RAM = auto()
    CREATEVM_LABEL_CPU = auto()
    CREATEVM_LABEL_GPU_VRAM = auto()
    CREATEVM_LABEL_GPU_LIST = auto()
    CREATEVM_LABEL_VMNAME = auto()
    CREATEVM_LABEL_VMDESC = auto()
    CREATEVM_LABEL_DISK_SIZE = auto()
    MSG_CREATEVM_DESC_TCG_ON = auto()
    MSG_CREATEVM_TITLE_TCG_ON = auto()
    MSG_CREATEVM_TITLE_WINDOWS_WARN = auto()
    MSG_CREATEVM_DESC_WINDOWS_WARN = auto()
    MSG_CREATEVM_TITLE_MACOS_WARN = auto()
    MSG_CREATEVM_DESC_MACOS_WARN = auto()
    MSG_CREATEVM_TITLE_EXIST = auto()
    MSG_CREATEVM_DESC_EXIST = auto()
    MSG_MAIN_METADATA_FAILED_TITLE = auto()
    MSG_MAIN_METADATA_FAILED_JSON = auto()
    MSG_MAIN_METADATA_FAILED_NOFILEFOUND = auto()
    MSG_MAIN_METADATA_FAILED_PERMISSION = auto()
    MSG_MAIN_METADATA_FAILED_SYSTEM = auto()
    MSG_MAIN_METADATA_FAILED_INCOMPATIBLE = auto()
    MSG_UPDATE_FOUND_TITLE = auto()
    MSG_UPDATE_FOUND_DESC = auto()
    MAIN_LOADEDPLUGINS = auto()
    MSG_UPDATE_FOUND_DESC_2 = auto()
    MSG_INFO_LANGUAGE_SAVED_TITLE = auto()
    MSG_INFO_LANGUAGE_SAVED_DESC = auto()
    MSG_UPDATE_DEV_VERSION_DESC = auto()
    MSG_UPDATE_DEV_VERSION_TITLE = auto()
    MSG_INFO_LANGUAGE_SAVE_FAIL_NOFILEFOUND = auto()
    MSG_INFO_LANGUAGE_SAVE_FAIL_PERMISSION = auto()
    MSG_INFO_LANGUAGE_SAVE_FAIL_SYSTEM = auto()
    MSG_INFO_LANGUAGE_SAVE_FAIL_TITLE = auto()
    MSG_VAR_TITLE = auto()
    MSG_VAR_DESC = auto()
    CREATEVM_NEXT = auto()
    CREATEVM_BACK = auto()
    CREATEVM_SAVE = auto()
    CREATEVM_LEGACY_BOOT = auto()
    MSG_CREATEVM_LEGACYBOOT_TITLE = auto()
    MSG_CREATEVM_LEGACYBOOT_DESC = auto()
    MSG_CREATEVM_ILLIGAL_VARIABLE_TITLE = auto()
    MSG_CREATEVM_ILLIGAL_VGPU_MEM = auto()
    MSG_CREATEVM_ILLIGAL_CORE = auto()
    MSG_VAR_PERMISSION = auto()
    MSG_CREATEVM_ILLIGAL_VGPUMEM_NOT_SUPPORTED = auto()
    MSG_CREATEVM_SLOWGPU_TITLE = auto()
    MSG_CREATEVM_SLOWGPU_DESC = auto()
    EDITVM_TITLE = auto()
    MSG_CONTEXT_DELETEVM_CONFIRM_TITLE = auto()
    MSG_CONTEXT_DELETEVM_CONFIRM_DESC = auto()
    MSG_CONTEXT_DELETEVM_CONFIRM_DESC_2 = auto()
    MSG_CONTEXT_DELETEVM_SUCCESS_TITLE = auto()
    MSG_CONTEXT_DELETEVM_SUCCESS_DESC = auto()
    MSG_CONTEXT_DELETEVM_SUCCESS_DESC_2 = auto()
    DISKTOOL_TITLE = auto()
    MSG_IUPL_INITALLIZE_FAIL_TITLE = auto()
    MSG_IUPL_INITALLIZE_FAIL_DESC = auto()
    DISKTOOL_LABEL_DISKSIZE = auto()
    DISKTOOL_LABEL_DISKTYPE = auto()
    DISKTOOL_LABEL_DISKNAME = auto()
    DISKTOOL_CREATE_DISK = auto()
    MSG_UPDATE_UNKNOWN_TITLE = auto()
    MSG_UPDATE_UNKNOWN_DESC = auto()
    CREATEVM_GUEST_ARCH = auto()
    MSG_DISKTOOL_CANCEL_TITLE = auto()
    MSG_DISKTOOL_CANCEL_DESC = auto()
    CREATEVM_LABEL_SELECT_DISKTYPE = auto()
    MSG_DISKTOOL_CREATED_TITLE = auto()
    MSG_DISKTOOL_CREATED_DESC = auto()
    MSG_DISKTOOL_CREATED_DESC_2 = auto()
    MSG_DISKTOOL_CREATE_FAILURE_TITLE = auto()
    MSG_DISKTOOL_CREATE_FAILURE_DESC = auto()
    TAB_GENERAL = auto()
    TAB_DISK = auto()
    TAB_ETC = auto()
    MSG_EXPORTVM_SUCCESS_TITLE = auto()
    MSG_EXPORTVM_SUCCESS_DESC = auto()
    MSG_EXPORTVM_FAILED_TITLE = auto()
    MSG_EXPORTVM_FAILED_DESC = auto()
    MSG_EXPORTVM_SUCCESS_DESC2 = auto()
    MSG_LOADVM_SUCCESS_TITLE = auto()
    MSG_LOADVM_SUCCESS_DESC = auto()
    MSG_LOADVM_FAILED_TITLE = auto()
    MSG_LOADVM_FAILED_DESC = auto()
    MSG_QEMU_FAILED_TITLE = auto()
    MSG_QEMU_FAILED_DESC = auto()
    MSG_QEMU_FAILED_DESC_NOPROCESS = auto()
    MSG_UPDATE_DEV_VERSION_DESC2 = auto()

class Language():
    def __init__(): # type: ignore
        pass

    def getLanguageByEnum(lang: LanguageList):
        load_dotenv('./data/setting.env')
        curLang = os.environ.get('Language')
        lang_file = open(f'data/language/{curLang}.json', "r+", encoding="utf-8")
        data = json.load(lang_file)

        return data[lang.name]